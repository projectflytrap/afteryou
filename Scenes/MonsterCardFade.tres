[gd_resource type="ShaderMaterial" load_steps=9 format=3 uid="uid://b4p3abbld4db3"]

[ext_resource type="Texture2D" uid="uid://b7qh7ewxyv8r4" path="res://Art/Textures/Maps/cement.jpg" id="2_0ctyk"]
[ext_resource type="Texture2D" uid="uid://bgiytb4y0174t" path="res://Art/Card/Monster/CardBorderFadeUpNoBack.png" id="2_2jvln"]

[sub_resource type="Shader" id="Shader_3hitd"]
code = "shader_type canvas_item;

group_uniforms code_set_parameters;
uniform vec2 mouse_position;
uniform vec2 sprite_position;

group_uniforms mouse_looker;
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
//uniform float y_rot : hint_range(-180, 180) = 0.0; From original shader -- https://godotshaders.com/shader/2d-perspective/
//uniform float x_rot : hint_range(-180, 180) = 0.0;
//Amount to inset the image by, a higher value means the image is smaller but less likely to go outside of the \"bounds\" of the original sprite size.
uniform float inset : hint_range(0, 1) = 0.0;
//Max tilt. 2 means the sprite goes all the way to one side, and the plane is parrelel to the 2d camera.
uniform float max_tilt : hint_range(0,2.0) = 1.0;
varying flat vec2 o;
varying vec3 p;
uniform float tilt_amplitude = 30.0;
uniform float max_distance = 500.0;
uniform vec2 overwrite_angle = vec2(0.0);
uniform float overwrite_angle_amount : hint_range(0, 1) = 0.0;

group_uniforms foil_uniforms;
//The color of the foil.
uniform vec3 foilcolor : source_color;
uniform float threshold = 0.1;
uniform float period = 1;
uniform float scroll = 1;
uniform float sin_threshold = 1.0;
uniform float foil_threshold = 0.1;
uniform float normal_strength = .1;
uniform float effect_alpha_mult : hint_range(0,1) = 1.0;
uniform float direction : hint_range(0,1) = 0.5;

uniform vec4 border_color : source_color; 
uniform vec4 border_glow_color : source_color;
uniform float border_glow_amount : hint_range(0.0, 1.0) = 1.0; 
uniform float border_glow_strength : hint_range(1.0, 10.0) = 1.0; 
uniform sampler2D border : filter_nearest;
uniform sampler2D foil_mask : filter_nearest;
uniform sampler2D gradient;
uniform sampler2D noise;
uniform sampler2D normal_map;

varying smooth vec2 direction_to;
varying smooth vec2 passthrough;

float inverse_lerp(float v, float a, float b){
	return (v - a) / (b - a);
}

mat2 to_rotated(float angle){
	return mat2(vec2(cos(angle),-sin(angle)),
				vec2(sin(angle),cos(angle)));
}

vec3 rotate_vector(vec3 v, float angleX, float angleY, float magnitude) {
	// Create rotation matrices for X and Y axes.
	mat3 rotX = mat3(
		vec3(1.0, 0.0, 0.0),
		vec3(0.0, cos(angleX), -sin(angleX)),
		vec3(0.0, sin(angleX), cos(angleX))
	);
	mat3 rotY = mat3(
		vec3(cos(angleY), 0.0, sin(angleY)),
		vec3(0.0, 1.0, 0.0),
		vec3(-sin(angleY), 0.0, cos(angleY))
	);
	// Combine the rotations. Order matters! Y then X is common.
	mat3 combinedRotation = rotX * rotY; // Apply Y rotation first, then X.
	// Rotate the vector.
	vec3 rotatedVector = combinedRotation * v;
	// Apply magnitude
	rotatedVector = normalize(rotatedVector) * magnitude;
	return rotatedVector;
}

void vertex(){
	direction_to = mouse_position - sprite_position;
	float d = length( direction_to );
	float magnitude = min( max_tilt , d / (max_distance));
	magnitude = mix(magnitude, 150.0 / (max_distance*(1.0-0.8*overwrite_angle_amount)), overwrite_angle_amount);
	float angle = atan(direction_to.x,direction_to.y);
	float x_rota = abs(angle) / PI;
	float y_rota = abs(atan(direction_to.y,direction_to.x)) / PI;
	y_rota = mix(y_rota, overwrite_angle.y, overwrite_angle_amount);
	x_rota = mix(x_rota, overwrite_angle.x, overwrite_angle_amount);
	
	float sin_b = sin( (-y_rota + .5) * magnitude * (PI / 2.0) );
	float cos_b = cos( (-y_rota + .5) * magnitude * (PI / 2.0) );
	float sin_c = sin( (x_rota - .5) * magnitude * (PI / 2.0) );
	float cos_c = cos( (x_rota - .5) * magnitude * (PI / 2.0) );
	
	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;
	
	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;
	
	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;
	
	
	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;

	VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment() {
	//culls the back somehow
	if (cull_back && p.z <= 0.0) discard;
	//get the UV from based on the tilt from the vertex function
	vec2 uv = (p.xy / p.z).xy - o;
	vec2 adjusted_uv = uv + 0.5;
	//get the color texture
	vec4 albedo_tex = texture(TEXTURE, adjusted_uv);
	bool is_border = texture(border, adjusted_uv).a > 0.1;
	albedo_tex = albedo_tex * float(!is_border) + mix(border_color, border_glow_color, border_glow_amount) * float(is_border);
	COLOR = albedo_tex;
	vec4 mask = texture(foil_mask, adjusted_uv);
	float d = length( direction_to );
	float magnitude = min( max_tilt , d / max_distance);
	float angle = atan(direction_to.x,direction_to.y);
	float x_rota = abs(angle) / PI;
	float y_rota = abs(atan(direction_to.y,direction_to.x)) / PI;
	vec3 normal_map_tex = texture(normal_map,adjusted_uv).rgb * 2.0 - 1.0;
	vec3 normal = rotate_vector(vec3(1.0,1.0,1.0),x_rota,y_rota,magnitude * magnitude);
	normal *= dot(normal_map_tex,vec3(x_rota,y_rota,0.0)) * normal_strength;
	//normal *= normal_map_tex * normal_strength;
	vec4 noise_tex = texture(noise,adjusted_uv);
	vec2 gradiant_sample = vec2((0.25+(normal.y*direction*2.0-normal.x*(1.0-direction)*2.0)/2.0+(uv.y*direction+uv.x*(1.0-direction))/2.0), 0.0);
	gradiant_sample += vec2(magnitude,0.0) * scroll;
	gradiant_sample = mod((gradiant_sample+adjusted_uv) * period,1.0);
	vec4 gradient_tex = texture(gradient, gradiant_sample);
	float strength = effect_alpha_mult * mask.r * (1.0 - length(foilcolor - albedo_tex.rgb) * foil_threshold);
	COLOR.rgb = mix(albedo_tex.rgb, gradient_tex.rgb*(noise_tex.rgb*2.0), strength);//(effect_alpha_mult-length(albedo_tex))*gradient_tex.a*effect_alpha_mult);
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
	COLOR.a *= pow(adjusted_uv.y, 2.0);
	
	//Make borders glow
	vec3 glow_border = mix(COLOR.rgb, border_glow_color.rgb * border_glow_strength, border_glow_amount);
	COLOR.rgb = COLOR.rgb * float(!is_border) + glow_border * float(is_border);
}"

[sub_resource type="Gradient" id="Gradient_nyipx"]
offsets = PackedFloat32Array(0, 0.160714, 0.227679, 0.241071, 0.34375, 0.598214, 0.669643, 0.910714, 1)
colors = PackedColorArray(1, 1, 1, 1, 0.255659, 0.255659, 0.255659, 1, 0.197261, 0.197261, 0.197261, 1, 0.244776, 0.244776, 0.244776, 1, 1.20327e-06, 0.421396, 0.519772, 1, 0.43, 0.43, 0.43, 1, 0.801947, 0.586399, 0.192856, 1, 0.466181, 0.466181, 0.466181, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_6qb7a"]
gradient = SubResource("Gradient_nyipx")

[sub_resource type="Gradient" id="Gradient_if5vy"]
offsets = PackedFloat32Array(0, 0.272321, 0.375, 0.455357, 0.633929, 0.915179, 1)
colors = PackedColorArray(1, 0.220567, 0.299749, 1, 0.759995, 0.284326, 0.932235, 1, 0.321957, 0.611422, 0.92397, 1, 1.82897e-06, 0.56156, 0.770272, 1, 8.66354e-07, 0.717676, 0.52246, 1, 0.985606, 0.82515, 0.494096, 1, 1, 1, 1, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_bvbjl"]
frequency = 0.0305
fractal_type = 3
fractal_octaves = 3
fractal_gain = 0.2
domain_warp_enabled = true
domain_warp_fractal_octaves = 2
domain_warp_fractal_lacunarity = 4.91
domain_warp_fractal_gain = 0.6

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_s8ea6"]
width = 256
height = 343
seamless = true
seamless_blend_skirt = 0.353
color_ramp = SubResource("Gradient_if5vy")
noise = SubResource("FastNoiseLite_bvbjl")

[resource]
shader = SubResource("Shader_3hitd")
shader_parameter/mouse_position = Vector2(0, 0)
shader_parameter/sprite_position = null
shader_parameter/fov = 90.0
shader_parameter/cull_back = true
shader_parameter/inset = 0.0
shader_parameter/max_tilt = 1.0
shader_parameter/tilt_amplitude = 100.0
shader_parameter/max_distance = 770.0
shader_parameter/overwrite_angle = Vector2(0.5, -1.5)
shader_parameter/overwrite_angle_amount = 0.0
shader_parameter/foilcolor = Color(0.544975, 0.544974, 0.544974, 1)
shader_parameter/threshold = 0.1
shader_parameter/period = 0.5
shader_parameter/scroll = 1.0
shader_parameter/sin_threshold = 1.0
shader_parameter/foil_threshold = 1.2
shader_parameter/normal_strength = 1.0
shader_parameter/effect_alpha_mult = 0.494
shader_parameter/direction = 0.657
shader_parameter/border_color = Color(0.522102, 0.524033, 0.395845, 1)
shader_parameter/border_glow_color = Color(0, 0.933333, 0.207843, 1)
shader_parameter/border_glow_amount = 0.0
shader_parameter/border_glow_strength = 4.0
shader_parameter/border = ExtResource("2_2jvln")
shader_parameter/gradient = SubResource("GradientTexture1D_6qb7a")
shader_parameter/noise = SubResource("NoiseTexture2D_s8ea6")
shader_parameter/normal_map = ExtResource("2_0ctyk")
